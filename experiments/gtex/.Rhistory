nGenes = 500,
group.prob = c(0.75, 0.25),
method = "groups",
verbose = FALSE)
count_matrix <- sim.groups@assays@data$counts %>% t() %>% as.data.frame()
count_matrix %>% ggplot(aes(Gene1, Gene2)) +
geom_point()
prcomp(count_matrix)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
plotPCA(sim.groups, colour_by = "Group")
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(batchCells = c(200, 100),
nGenes = 500,
group.prob = c(0.5, 0.5),
method = "groups",
verbose = FALSE)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
plotPCA(sim.groups, colour_by = "Group")
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(batchCells = c(100, 100),
nGenes = 500,
group.prob = c(0.5, 0.5),
method = "groups",
verbose = FALSE)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
plotPCA(sim.groups, colour_by = "Group")
## ----groups-------------------------------------------------------------------
# sim.groups <- splatSimulate(batchCells = c(100, 100),
#                             nGenes = 500,
#                             group.prob = c(0.5, 0.5),
#                             method = "groups",
#                             verbose = FALSE)
sim.groups <- splatSimulate(group.prob = c(0.5, 0.5),
method = "groups",
verbose = FALSE)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
plotPCA(sim.groups, colour_by = "Group")
## ----groups-------------------------------------------------------------------
# sim.groups <- splatSimulate(batchCells = c(100, 100),
#                             nGenes = 500,
#                             group.prob = c(0.5, 0.5),
#                             method = "groups",
#                             verbose = FALSE)
sim.groups <- splatSimulate(group.prob = c(0.75, 0.25),
method = "groups",
verbose = FALSE)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
plotPCA(sim.groups, colour_by = "Group")
?splatSimulate
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(nBatches = 2,
batchCells = c(100, 100),
nGenes = 500,
group.prob = c(0.5, 0.5),
method = "groups",
verbose = FALSE)
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(batchCells = c(100),
nGenes = 500,
group.prob = c(0.5, 0.5),
method = "groups",
verbose = FALSE)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
source('~/Documents/beehive/cplvm/data/splatter/generate_splatter_data.R', echo=TRUE)
sim.groups <- splatSimulate(batchCells = c(100),
nGenes = 500,
group.prob = c(0.5, 0.5),
method = "groups",
verbose = FALSE)
# sim.groups <- splatSimulate(group.prob = c(0.75, 0.25),
#                             method = "groups",
#                             verbose = FALSE)
# count_matrix <- sim.groups@assays@data$counts %>% t() %>% as.data.frame()
# count_matrix %>% ggplot(aes(Gene1, Gene2)) +
#   geom_point()
# prcomp(count_matrix)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
plotPCA(sim.groups, colour_by = "Group")
sim.groups <- splatSimulate(batchCells = c(100),
nGenes = 500,
group.prob = c(0.5, 0.5),
method = "groups",
verbose = FALSE)
# sim.groups <- splatSimulate(group.prob = c(0.75, 0.25),
#                             method = "groups",
#                             verbose = FALSE)
# count_matrix <- sim.groups@assays@data$counts %>% t() %>% as.data.frame()
# count_matrix %>% ggplot(aes(Gene1, Gene2)) +
#   geom_point()
# prcomp(count_matrix)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
plotPCA(sim.groups, colour_by = "Group")
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(batchCells = c(200, 100),
nGenes = 500,
group.prob = c(0.5, 0.5),
method = "groups",
verbose = FALSE)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
plotPCA(sim.groups, colour_by = "Group")
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(batchCells = c(200, 100),
nGenes = c(500, 500)
,
group.prob = c(0.5, 0.5),
method = "groups",
verbose = FALSE)
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(batchCells = c(200, 100),
nGenes = 500,
group.prob = c(0.5),
method = "groups",
verbose = FALSE)
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(batchCells = c(200, 100),
nGenes = 500,
group.prob = c(1),
method = "groups",
verbose = FALSE)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
plotPCA(sim.groups, colour_by = "Group")
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(batchCells = c(200,100),
nGenes = 500,
group.prob = c(0.5, 0.5),
method = "groups",
verbose = T)
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(batchCells = c(200,10),
nGenes = 500,
group.prob = c(0.5, 0.5),
method = "groups",
verbose = T)
# sim.groups <- splatSimulate(group.prob = c(0.75, 0.25),
#                             method = "groups",
#                             verbose = FALSE)
# count_matrix <- sim.groups@assays@data$counts %>% t() %>% as.data.frame()
# count_matrix %>% ggplot(aes(Gene1, Gene2)) +
#   geom_point()
# prcomp(count_matrix)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
plotPCA(sim.groups, colour_by = "Group")
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(nCells = 200,
nGenes = 500,
group.prob = c(0.5, 0.5),
method = "groups",
verbose = F)
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(batchCells = 200,
nGenes = 500,
group.prob = c(0.5, 0.5),
method = "groups",
verbose = F)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
plotPCA(sim.groups, colour_by = "Group")
# Estimate parameters from mock data
params <- splatEstimate(sce)
sim.groups <- splatSimulate(batchCells = 200,
nGenes = 500,
group.prob = c(0.75, 0.5),
method = "groups",
verbose = F)
# sim.groups <- splatSimulate(group.prob = c(0.75, 0.25),
#                             method = "groups",
#                             verbose = FALSE)
# count_matrix <- sim.groups@assays@data$counts %>% t() %>% as.data.frame()
# count_matrix %>% ggplot(aes(Gene1, Gene2)) +
#   geom_point()
# prcomp(count_matrix)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
plotPCA(sim.groups, colour_by = "Group")
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(batchCells = 200,
nGenes = 500,
group.prob = c(0.75, 0.25),
method = "groups",
verbose = F)
# sim.groups <- splatSimulate(group.prob = c(0.75, 0.25),
#                             method = "groups",
#                             verbose = FALSE)
# count_matrix <- sim.groups@assays@data$counts %>% t() %>% as.data.frame()
# count_matrix %>% ggplot(aes(Gene1, Gene2)) +
#   geom_point()
# prcomp(count_matrix)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
plotPCA(sim.groups, colour_by = "Group")
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(batchCells = 200,
nGenes = 500,
group.prob = c(0.95, 0.05),
method = "groups",
verbose = F)
# sim.groups <- splatSimulate(group.prob = c(0.75, 0.25),
#                             method = "groups",
#                             verbose = FALSE)
# count_matrix <- sim.groups@assays@data$counts %>% t() %>% as.data.frame()
# count_matrix %>% ggplot(aes(Gene1, Gene2)) +
#   geom_point()
# prcomp(count_matrix)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
plotPCA(sim.groups, colour_by = "Group")
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(batchCells = 200,
nGenes = 500,
group.prob = c(0.75, 0.25),
method = "groups",
verbose = F)
# sim.groups <- splatSimulate(group.prob = c(0.75, 0.25),
#                             method = "groups",
#                             verbose = FALSE)
# count_matrix <- sim.groups@assays@data$counts %>% t() %>% as.data.frame()
# count_matrix %>% ggplot(aes(Gene1, Gene2)) +
#   geom_point()
# prcomp(count_matrix)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
plotPCA(sim.groups, colour_by = "Group")
count_matrix %>% write.csv("~/Documents/beehive/cplvm/data/splatter/two_clusters.csv")
sim.groups$#Group
sim.groups$Group
nonresponsive_cells <- count_matrix[which(sim.groups$Group == "Group1")]
responsive_cells <- count_matrix[which(sim.groups$Group == "Group2")]
dim(nonresponsive_cells)
dim(responsive_cells)
dim(sim.groups@assays@data$counts)
nonresponsive_cells <- count_matrix[which(sim.groups$Group == "Group1"),]
responsive_cells <- count_matrix[which(sim.groups$Group == "Group2"),]
dim(sim.groups@assays@data$counts)
dim(responsive_cells)
# Split nonresponsive cells into background and foreground
n_nonresposive <- nrow(nonresponsive_cells)
n_bg <- int(n_nonresposive / 2)
n_bg <- (n_nonresposive / 2) %>% integer()
n_bg
n_nonresposive / 2
n_bg <- (n_nonresposive / 2) %>% round()
n_bg
sample(seq(n_nonresposive))
bg_idx <- sample(seq(n_nonresposive), size = n_bg, replace = F)
setdiff(seq(n_nonresposive, bg_idx))
setdiff(seq(n_nonresposive), bg_idx)
fg_nonresponsive_idx <- setdiff(seq(n_nonresposive), bg_idx)
stopifnot(length(intersect(bg_idx, fg_nonresponsive_idx)) == 0)
fg_data <- rbind(c(fg_nonresponsive_data, responsive_cells))
bg_data <- nonresponsive_cells[bg_idx,]
fg_nonresponsive_data <- nonresponsive_cells[fg_nonresponsive_idx,]
fg_data <- rbind(c(fg_nonresponsive_data, responsive_cells))
dim(fg_data)
fg_nonresponsive_data
dim(fg_nonresponsive_data)
fg_data <- cbind(c(fg_nonresponsive_data, responsive_cells))
dim(fg_data)
fg_data <- rbind(fg_nonresponsive_data, responsive_cells)
dim(fg_data)
# Save
bg_data %>% write.csv("~/Documents/beehive/cplvm/data/splatter/two_clusters/bg.csv")
fg_data %>% write.csv("~/Documents/beehive/cplvm/data/splatter/two_clusters/fg.csv")
fg_labels <- c(rep(0, nrow(fg_nonresponsive_data)), rep(1, nrow(responsive_cells)))
fg_labels
fg_labels %>% to.data.frame()
fg_labels %>% data.frame()
fg_labels %>% data.frame() %>%
set_colnames("fg_label")
library(splatter)
library(scater)
library(magrittr)
library(ggplot2)
set.seed(1)
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(batchCells = 200,
nGenes = 500,
group.prob = c(0.75, 0.25),
method = "groups",
verbose = F)
count_matrix <- sim.groups@assays@data$counts %>% t() %>% as.data.frame()
# Split into responsive and nonresponsive cells
nonresponsive_cells <- count_matrix[which(sim.groups$Group == "Group1"),]
responsive_cells <- count_matrix[which(sim.groups$Group == "Group2"),]
# Split nonresponsive cells into background and foreground
n_nonresposive <- nrow(nonresponsive_cells)
n_bg <- (n_nonresposive / 2) %>% round()
bg_idx <- sample(seq(n_nonresposive), size = n_bg, replace = F)
fg_nonresponsive_idx <- setdiff(seq(n_nonresposive), bg_idx)
stopifnot(length(intersect(bg_idx, fg_nonresponsive_idx)) == 0)
bg_data <- nonresponsive_cells[bg_idx,]
fg_nonresponsive_data <- nonresponsive_cells[fg_nonresponsive_idx,]
fg_data <- rbind(fg_nonresponsive_data, responsive_cells)
fg_labels <- c(rep(0, nrow(fg_nonresponsive_data)), rep(1, nrow(responsive_cells)))
# Save
bg_data %>% write.csv("~/Documents/beehive/cplvm/data/splatter/two_clusters/bg.csv")
fg_data %>% write.csv("~/Documents/beehive/cplvm/data/splatter/two_clusters/fg.csv")
fg_labels %>% data.frame() %>%
set_colnames("fg_label") %>%
write.csv("~/Documents/beehive/cplvm/data/splatter/two_clusters/fg_labels.csv")
install.packages("covequal")
library(covequal)
n1 <- 100
n2 <- 100
p <- 200
X <- matrix(rnorm(n1*p), ncol = p)
Y <- matrix(rnorm(n2*p), ncol = p)
test_that("no error in computing lambda", {
output1 <- try(test_covequal(X, Y, inference = "TW",
nperm = 10),
silent = TRUE)
output2 <- try(test_covequal(X, Y, inference = "permutation",
nperm = 10),
silent = TRUE)
expect_false(inherits(output1, "try-error"))
expect_false(inherits(output2, "try-error"))
})
output1 <- try(test_covequal(X, Y, inference = "TW",
nperm = 10),
silent = TRUE)
View(output1)
output1$test_statistic
output1$pvalue
?test_covequal
library(covequal)
n1 <- 100
library(covequal)
data_dir = "/Users/andrewjones/Documents/beehive/cplvm/experiments/simulation_experiments/hypothesis_testing/tmp"
X_path = file.path(data_dir, "X.csv")
Y_path = file.path(data_dir, "Y.csv")
X <- read.csv(X_path)
Y <- read.csv(Y_path)
X
corner(X)
library(useful)
corner(X)
X <- read.csv(X_path, row.names = 1)
corner(X)
Y <- read.csv(Y_path, row.names = 1)
head(X)
head(Y)
dim(X)
stopifnot(ncol(X) == ncol(Y))
output1 <- try(test_covequal(X, Y, inference = "TW",
nperm = 10),
silent = TRUE)
output1
output1 <- try(test_covequal(X, Y, inference = "TW",
nperm = 10),
silent = F)
X <- read.csv(X_path, row.names = 1) %>% as.matrix()
library(magrittr)
X <- read.csv(X_path, row.names = 1) %>% as.matrix()
Y <- read.csv(Y_path, row.names = 1) %>% as.matrix()
stopifnot(ncol(X) == ncol(Y))
output1 <- try(test_covequal(X, Y, inference = "TW",
nperm = 10),
silent = F)
output2 <- try(test_covequal(X, Y, inference = "permutation",
nperm = 10),
silent = TRUE)
output1
output2
output2
output2 <- try(test_covequal(X, Y, inference = "permutation",
nperm = 10),
silent = TRUE)
output2
output2 <- try(test_covequal(X, Y, inference = "permutation",
nperm = 10),
silent = F)
output1 %>% as.data.frame()
output1 %>% as.data.frame() %>%
write.csv(file.path(data_dir, "curr_johnston_output.csv"))
library("devtools")
devtools::install_github("lingxuez/sLED")
library(sLED)
library(magrittr)
?sLED
install.packages("spatialLIBD")
library("spatialLIBD")
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install("spatialLIBD")
library("spatialLIBD")
spe <- fetch_data(type = "spe")
spe
spe <- fetch_data(type = "spe")
spe <- fetch_data(type = "sce")
spe
spe@assays
spe
spe@assays$counts
spe@assays@data
spe@assays@data$counts
dim(spe@assays@data$counts)
spe@rowRanges
spe$sample_name
len(spe$sample_name)
length(spe$sample_name)
dim(spe@assays@data$counts)
unique(spe$sample_name)
length(unique(spe$sample_name))
[spe$sample_name == 151507]
spe@assays@data$counts[spe$sample_name == 151507]
dim(spe@assays@data$counts)
length(spe$sample_name)
one_sample <- spe@assays@data$counts[,spe$sample_name == 151507]
one_sample
dim(one_sample)
typeof(one_sample)
one_sample@x
dim(one_sample@x)
as.data.frame(one_sample)
as.matrix(one_sample)
one_sample_mat <- as.matrix(one_sample)
head(one_sample_mat)
dim(one_sample_mat)
write.csv(file = "~/Documents/beehive/spatial_stitching/spatial-alignment/data/visium/human_dlpfc/sample151507_count_matrix.csv", x = one_sample_mat)
library("spatialLIBD")
spe <- fetch_data(type = "sce")
sample_names <- unique(spe$sample_name)
spe$row
spe@metadata
length(spe$row)
length(spe$col)
where(spe$sample_name == curr_sample_name)
which(spe$sample_name == curr_sample_name)
which(spe$sample_name == 151507)
curr_idx <- which(spe$sample_name == 151507)
spatial_coords <- data.frame(row=spe$row[curr_idx], col=spe$col[curr_idx])
spatial_coords
write.csv(file = "~/Documents/beehive/spatial_stitching/spatial-alignment/data/visium/human_dlpfc/sample151507_spatial_coords.csv", x = one_sample_mat, row.names = F)
curr_sample_name <- 151507
SAVE_DIR <- "~/Documents/beehive/spatial_stitching/spatial-alignment/data/visium/human_dlpfc"
curr_fname = sprintf("sample%d_count_matrix.csv", curr_sample_name)
curr_fname
write.csv(file = "~/Documents/beehive/spatial_stitching/spatial-alignment/data/visium/human_dlpfc/sample151507_spatial_coords.csv", x = spatial_coords, row.names = F)
sample_names <- unique(spe$sample_name)
sample_names
for (curr_sample_name %in% sample_names) {
print(curr_sample_name)
}
for (curr_sample_name in sample_names) {
print(curr_sample_name)
}
curr_dir <- file.path(SAVE_DIR, curr_sample_name)
curr_dir
library("spatialLIBD")
SAVE_DIR <- "~/Documents/beehive/spatial_stitching/spatial-alignment/data/visium/human_dlpfc"
spe <- fetch_data(type = "sce")
for (curr_sample_name in sample_names) {
## Create subdirectory
curr_dir <- file.path(SAVE_DIR, curr_sample_name)
dir.create(curr_dir, showWarnings = FALSE)
## Slice out this sample's data
curr_idx <- which(spe$sample_name == curr_sample_name)
one_sample <- spe@assays@data$counts[,spe$sample_name == curr_sample_name]
one_sample_mat <- as.matrix(one_sample)
## Save
curr_fname = sprintf("sample%d_count_matrix.csv", curr_sample_name)
write.csv(file = file.path(SAVE_DIR, curr_fname), x = one_sample_mat)
## Same for spatial coordinates
spatial_coords <- data.frame(row=spe$row, col=spe$col)
curr_fname = sprintf("sample%d_spatial_coords.csv", curr_sample_name)
write.csv(file = file.path(SAVE_DIR, curr_fname), x = spatial_coords)
}
library(ggplot2)
library(magrittr)
library(pheatmap)
setwd("~/Documents/beehive/multi-group-GP/experiments/gtex/")
a_mat <- read.csv("./a_matrix_full.csv",
row.names = 1,
header = T)
rownames(a_mat) <- colnames(a_mat)
a_mat <- log10(a_mat)
diag(a_mat) <- 0
paletteLength <- 50
myColor <-
colorRampPalette(c("red", "white", "black"))(paletteLength)
tissue_names <- colnames(a_mat)
tissue_names <- stringr::str_replace_all(tissue_names, "[.]", " ")
pheatmap::pheatmap(
a_mat,
main = "Estimated pairwise log(a)",
color = myColor,
fontsize = 15,
filename = "../../plots/gtex_pairwise_a_heatmap.png",
width=16,
height=16,
show_colnames = T,
labels_row = tissue_names,
labels_col = tissue_names,
)
dim(a_mat)
a_mat
tissue_names
paste(tissue_names)
paste(tissue_names)
paste(tissue_names, collapse = ",")
paste(tissue_names, collapse = ", ")
